(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.immutagen = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.immutagen = exports["default"] = void 0;

// A simple immutable generator emulator that replays history in order to
// "clone" JavaScript's mutable generators
// Read the following article to understand how this code works:
// https://stackoverflow.com/a/56815335/783743
var next = function next(regen) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return function (data) {
    var gen = regen.apply(void 0, args);
    return gen.next(data), gen;
  };
};

var immutagen = function immutagen(regen) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return function loop(regen) {
      return function (gen, data) {
        var _gen$next = gen.next(data),
            value = _gen$next.value,
            done = _gen$next.done;

        if (done) return {
          value: value,
          next: null,
          mutable: gen
        };
        var replay = false;
        var recur = loop(next(regen, data));

        var mutable = function mutable() {
          return replay ? regen(data) : replay = gen;
        };

        var result = {
          value: value,
          next: function next(value) {
            return recur(mutable(), value);
          }
        };
        return Object.defineProperty(result, "mutable", {
          get: mutable
        });
      };
    }(next.apply(void 0, [regen].concat(args)))(regen.apply(void 0, args));
  };
};

exports.immutagen = exports["default"] = immutagen;

},{}]},{},[1])(1)
});
